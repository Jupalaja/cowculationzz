version: 0.2

phases:
  pre_build:
    commands:
      # This project uses Gradle, which is run inside the Dockerfile.
      - echo Logging in to Amazon ECR...
      - aws --version

      # Define repository details dynamically for portability.
      # AWS_DEFAULT_REGION is a standard environment variable in CodeBuild.
      # The AWS Account ID is derived using the AWS CLI.
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REPOSITORY_NAME="jupalaja/kotlin-registry"
      - REPOSITORY_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY_NAME"
      
      # Log in to the Amazon ECR registry.
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
      
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$COMMIT_HASH
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      # The 'name' in imagedefinitions.json must match the container name in your ECS Task Definition.
      # Using 'calorie-counter-app' for consistency with docker-compose.yaml, but please verify.
      - CONTAINER_NAME="calorie-counter-app"
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - echo "imagedefinitions.json content:"
      - cat imagedefinitions.json

artifacts:
  files:
    # The imagedefinitions.json file is the primary artifact for ECS deployments via CodePipeline.
    - imagedefinitions.json
    # The application JAR is built inside the Docker image and is therefore not a separate artifact.

